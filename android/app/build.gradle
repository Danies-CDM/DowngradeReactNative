apply plugin: "com.android.application"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: "com.facebook.react"
import groovy.json.JsonSlurper

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

//project.ext.react = [
//    enableHermes: true,  // clean and rebuild if changing
//]

//apply from: "../../node_modules/react-native/react.gradle"
// apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
// def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
def useIntlJsc = true
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
//def enableHermes = project.ext.react.get("enableHermes", true);

/**
 * Architectures to build native code for in debug.
 */
def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

def getAppVersion() {
    def inputFile = new File("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}

def appVersion = getAppVersion()

// def reactNativeArchitectures() {
//     def value = project.getProperties().get("reactNativeArchitectures")
//     return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
// }

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    namespace = "com.mflsuperapp"
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/libjsc.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst '**/*.so'
    }
    defaultConfig {
        applicationId "com.mflsuperapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 198
        versionName appVersion
    }
    // splits {
    //     abi {
    //         reset()
    //         enable enableSeparateBuildPerCPUArchitecture
    //         universalApk false  // If true, also generate a universal APK
    //         //include (*reactNativeArchitectures())
    //         include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    //     }
    // }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
//             storeFile file('abfrl_keystore.jks')
//             storePassword '123456'
//             keyAlias 'abfrl'
//             keyPassword '123456'
        }
        release {
            if (project.hasProperty('MFL_STORE_FILE')) {
                storeFile file(MFL_STORE_FILE)
                storePassword MFL_STORE_PASSWORD
                keyAlias MFL_ALIAS
                keyPassword MFL_KEY_PASSWORD
            } else {
                storeFile file('abfrl_keystore.jks')
                storePassword '123456'
                keyAlias 'abfrl'
                keyPassword '123456'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            if (nativeArchitectures) {
                ndk {
                    abiFilters nativeArchitectures.split(',')
                }
            }
            // firebaseCrashlytics {
            //     mappingFileUploadEnabled false
            // }
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            shrinkResources true
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // firebaseCrashlytics {
            //     mappingFileUploadEnabled false
            // }
        }
    }
    flavorDimensions "store", "environment"
    productFlavors {
        aeo {
            dimension "store"
            applicationId "com.americaneagle.abfrl"
            resValue "string", "url_scheme", "aeo"
            resValue "string", "url_domain_test", "test.aeo.abfrl.in"
            resValue "string", "url_domain_uat", "uat.aeo.abfrl.in"
            resValue "string", "url_domain_prod", "aeo.abfrl.in"
            resValue "string", "url_af_deeplink", "americaneagle.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "americaneagle.onelink.me"
            resValue "string", "application_id_for_provider", "com.americaneagle.abfrl.fileprovider"
        }
        allenSolly {
            dimension "store"
            applicationId "com.allensolly.abfrl"
            resValue "string", "url_scheme", "allensolly"
            resValue "string", "url_domain_test", "test.allensolly.abfrl.in"
            resValue "string", "url_domain_uat", "uat.allensolly.abfrl.in"
            resValue "string", "url_domain_prod", "allensolly.abfrl.in"
            resValue "string", "url_af_deeplink", "allensolly.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "allensolly.onelink.me"
            resValue "string", "application_id_for_provider", "com.allensolly.abfrl.fileprovider"
        }
        forever21 {
            dimension "store"
            applicationId "com.forever21.abfrl"
            resValue "string", "url_scheme", "forever21"
            resValue "string", "url_domain_test", "test.forever21.abfrl.in"
            resValue "string", "url_domain_uat", "uat.forever21.abfrl.in"
            resValue "string", "url_domain_prod", "forever21.abfrl.in"
            resValue "string", "url_af_deeplink", "forever21.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "forever21.onelink.me"
            resValue "string", "application_id_for_provider", "com.forever21.abfrl.fileprovider"
        }
        louisPhilippe {
            dimension "store"
            applicationId "com.louisphilippe.abfrl"
            resValue "string", "url_scheme", "louisphilippe"
            resValue "string", "url_domain_test", "test.louisphilippe.abfrl.in"
            resValue "string", "url_domain_uat", "uat.louisphilippe.abfrl.in"
            resValue "string", "url_domain_prod", "louisphilippe.abfrl.in"
            resValue "string", "url_af_deeplink", "louisphilippe.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "louisphilippe.onelink.me"
            resValue "string", "application_id_for_provider", "com.louisphilippe.abfrl.fileprovider"
        }
        peterEngland {
            dimension "store"
            applicationId "com.peterengland.abfrl"
            resValue "string", "url_scheme", "peterengland"
            resValue "string", "url_domain_test", "test.peterengland.abfrl.in"
            resValue "string", "url_domain_uat", "uat.peterengland.abfrl.in"
            resValue "string", "url_domain_prod", "peterengland.abfrl.in"
            resValue "string", "url_af_deeplink", "peterengland.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "peterengland.onelink.me"
            resValue "string", "application_id_for_provider", "com.peterengland.abfrl.fileprovider"
        }
        reebok {
            dimension "store"
            applicationId "com.reebok.abfrl"
            resValue "string", "url_scheme", "reebok"
            resValue "string", "url_domain_test", "test.reebok.abfrl.in"
            resValue "string", "url_domain_uat", "uat.reebok.abfrl.in"
            resValue "string", "url_domain_prod", "reebok.abfrl.in"
            resValue "string", "url_af_deeplink", "reebok.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "reebok.onelink.me"
            resValue "string", "application_id_for_provider", "com.reebok.abfrl.fileprovider"
        }
        simonCarter {
            dimension "store"
            applicationId "com.simoncarter.abfrl"
            resValue "string", "url_scheme", "simoncarter"
            resValue "string", "url_domain_test", "test.simoncarter.abfrl.in"
            resValue "string", "url_domain_uat", "uat.simoncarter.abfrl.in"
            resValue "string", "url_domain_prod", "simoncarter.abfrl.in"
            resValue "string", "url_af_deeplink", "simoncarter.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "simoncarter.onelink.me"
            resValue "string", "application_id_for_provider", "com.simoncarter.abfrl.fileprovider"
        }
        vanHeusen {
            dimension "store"
            applicationId "com.vanheusenindia.abfrl"
            resValue "string", "url_scheme", "vanheusenindia"
            resValue "string", "url_domain_test", "test.vanheusenindia.abfrl.in"
            resValue "string", "url_domain_uat", "uat.vanheusenindia.abfrl.in"
            resValue "string", "url_domain_prod", "vanheusenindia.abfrl.in"
            resValue "string", "url_af_deeplink", "vanheusen.onelink.me"
            resValue "string", "url_domain_vhiw_prod", "innerwear.vanheusenindia.abfrl.in"
            resValue "string", "application_id_for_provider", "com.vanheusenindia.abfrl.fileprovider"
        }

        dev {
            dimension "environment"
            applicationIdSuffix ".dev"

            resValue "string", "CodePushDeploymentKey", "@string/CodePushDeploymentKeyDevelopment"
            resValue "string", "clevertap_account_id", "@string/clevertap_account_id_test"
            resValue "string", "clevertap_token", "@string/clevertap_token_test"
            resValue "string", "adobe_key", "@string/adobe_key_dev"
        }
        sit {
            dimension "environment"
            applicationIdSuffix ".sit"

            resValue "string", "CodePushDeploymentKey", "@string/CodePushDeploymentKeyDevelopment"
            resValue "string", "clevertap_account_id", "@string/clevertap_account_id_test"
            resValue "string", "clevertap_token", "@string/clevertap_token_test"
            resValue "string", "adobe_key", "@string/adobe_key_dev"
        }
        uat {
            dimension "environment"
            applicationIdSuffix ".preprod"

            resValue "string", "CodePushDeploymentKey", "@string/CodePushDeploymentKeyStaging"
            resValue "string", "clevertap_account_id", "@string/clevertap_account_id_test"
            resValue "string", "clevertap_token", "@string/clevertap_token_test"
            resValue "string", "adobe_key", "@string/adobe_key_dev"
        }
        prod {
            dimension "environment"

            resValue "string", "CodePushDeploymentKey", "@string/CodePushDeploymentKeyProduction"
            resValue "string", "clevertap_account_id", "@string/clevertap_account_id_prod"
            resValue "string", "clevertap_token", "@string/clevertap_token_prod"
            resValue "string", "adobe_key", "@string/adobe_key_prod"
        }
    }
    // applicationVariants are e.g. debug, release
    // applicationVariants.all { variant ->
    //     variant.outputs.each { output ->
    //         // For each separate APK per architecture, set a unique version code as described here:
    //         // https://developer.android.com/studio/build/configure-apk-splits.html
    //         // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
    //         def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
    //         def abi = output.getFilter(OutputFile.ABI)
    //         if (abi != null) {  // null for the universal-debug, universal-release variants
    //             output.versionCodeOverride =
    //                     defaultConfig.versionCode * 1000 + versionCodes.get(abi)
    //         }

    //     }
    // }
}

dependencies {
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }
    implementation project(':ymchat-react-native')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    //implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation("com.facebook.react:react-android")

    implementation "androidx.appcompat:appcompat:1.0.0"
    implementation "androidx.core:core:1.9.0"
    implementation 'com.facebook.fresco:fresco:2.5.0'
    implementation 'com.facebook.fresco:animated-gif:2.5.0'
    implementation project(':lottie-react-native')

    implementation project(':react-native-push-notification')
    //implementation 'com.clevertap.android:clevertap-rendermax-sdk:1.0.2'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    // implementation 'com.google.firebase:firebase-messaging:20.2.4'
    implementation 'com.google.firebase:firebase-messaging:23.0.6'
    implementation 'com.google.firebase:firebase-core:20.1.2'
    implementation 'com.google.android.gms:play-services-base:18.3.0'

    implementation 'com.adobe.marketing.mobile:assurance:1.+'
    implementation 'com.adobe.marketing.mobile:analytics:1.+'
    implementation 'com.adobe.marketing.mobile:sdk-core:1.11.4'
    implementation 'com.adobe.marketing.mobile:userprofile:1.+'
    implementation(platform("com.google.firebase:firebase-bom:33.0.0"))
    implementation 'com.google.firebase:firebase-analytics'

    implementation "com.clevertap.android:push-templates:1.1.0"
    implementation "com.clevertap.android:clevertap-android-sdk:6.2.1"
    implementation 'androidx.fragment:fragment:1.3.6'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
//            {
//        exclude group:'com.facebook.fbjni'
//    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        //  exclude group:'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
//            {
//        exclude group:'com.facebook.flipper'
//    }
    // constraints {
    //     implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
    //         because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    //     }
    //     implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
    //         because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    //     }
    // }

//    if (enableHermes) {
////        def hermesPath = "../../node_modules/hermes-engine/android/";
////        debugImplementation files(hermesPath + "hermes-debug.aar")
////        releaseImplementation files(hermesPath + "hermes-release.aar")
//         implementation("com.facebook.react:hermes-engine:+") { // From node_modules
//           exclude group:'com.facebook.fbjni'
//         }
//    } else {
//        implementation jscFlavor
//    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
//task copyDownloadableDepsToLibs(type: Copy) {
//    from configurations.implementation
//    into 'libs'
//}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
android.buildTypes.release.ndk.debugSymbolLevel = 'FULL'
